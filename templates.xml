<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="ArrayListInit" enabled="true" name="ArrayList">ArrayList&lt;${name}&gt; arr = new ArrayList&lt;${name}&gt;();</template><template autoinsert="true" context="java" deleted="false" description="CollectionComparator" enabled="true" name="CollectionsSort">Collections.sort(arr, new Comparator&lt;${dataType}&gt;() {&#13;
		        @Override&#13;
		        public int compare(${dataType} obj1, ${dataType} obj2) {&#13;
		            return obj1.getKey().compareTo(obj2.getValue());&#13;
		        }});</template><template autoinsert="true" context="java" deleted="false" description="DatabaseConnectivity" enabled="true" name="dbConnection">import java.sql.Connection;&#13;
import java.sql.DriverManager;&#13;
import java.sql.SQLException;&#13;
&#13;
public class DBConnection {&#13;
	private static final String DRIVER_CLASS = "com.mysql.cj.jdbc.Driver";&#13;
	private static final String URL = "jdbc:mysql://localhost:3306/AdvanceJavaAssignment";&#13;
	private static final String USER_NAME = "root";&#13;
	private static final String PASSWORD = "password";&#13;
	&#13;
	private Connection con;&#13;
	public Connection getCon() throws ClassNotFoundException,SQLException {&#13;
		if(con==null || con.isClosed()) {&#13;
			Class.forName(DRIVER_CLASS);&#13;
			con = DriverManager.getConnection(URL, USER_NAME, PASSWORD);		&#13;
		}&#13;
		return con;&#13;
	}&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="MapIterate" enabled="true" name="EntrySet">for (Entry&lt;${type1}, ${type2}&gt; itr : mp.entrySet()){&#13;
&#13;
}</template><template autoinsert="false" context="java-statements" deleted="false" description="iterate over an array or Iterable" enabled="true" id="org.eclipse.jdt.ui.templates.for_iterable" name="foreach">for (${iterable_type} ${iterable_element} : ${iterable}) {
	${cursor}
}</template><template autoinsert="true" context="java" deleted="false" description="HashMapInit" enabled="true" name="HashMap">Map&lt;${type1}, ${type2}&gt; mp = new HashMap&lt;${type1}, ${type2}&gt;();</template><template autoinsert="true" context="java" deleted="false" description="HashSetInit" enabled="true" name="HashSet">HashSet&lt;${type}&gt; hSet1 = new HashSet&lt;${type}&gt;(); </template><template autoinsert="true" context="java" deleted="false" description="HashSetInti" enabled="true" name="HashSet">Set&lt;${type}&gt; set1 = new HashSet&lt;${type}&gt;(); </template><template autoinsert="false" context="java-statements" deleted="false" description="dynamic type test and cast" enabled="true" id="org.eclipse.jdt.ui.templates.instanceof" name="instanceof">if (${name:var} instanceof ${type}) {
	${type} ${new_name} = (${type})${name};
	${cursor}
}</template><template autoinsert="true" context="java" deleted="false" description="CallableFullCodeProcedure" enabled="true" name="jdbcCallableProcedure">try {&#13;
			Scanner sc = new Scanner(System.in);&#13;
			System.out.print("Enter Student Details\nRoll No.: ");&#13;
			int rno = sc.nextInt();&#13;
			System.out.print("Name: ");&#13;
			String name = sc.next();&#13;
			System.out.print("Marks: ");&#13;
			float marks = sc.nextFloat();&#13;
			System.out.print("Date of Birth yyyy-mm-dd : ");&#13;
			String d = sc.next();&#13;
			SimpleDateFormat StdFormat = new SimpleDateFormat("yyyy-mm-dd");&#13;
			Date dt1 =  StdFormat.parse(d);&#13;
			long time = dt1.getTime();//millisecond&#13;
			java.sql.Date dob = new java.sql.Date(time);&#13;
			Class.forName("com.mysql.cj.jdbc.Driver");&#13;
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/AdvanceJavaAssignment", "root","password");&#13;
			CallableStatement s = con.prepareCall("{ call insert1(?,?,?,?)}");&#13;
			s.setInt(1, rno);&#13;
			s.setString(2, name);&#13;
			s.setFloat(3, marks);&#13;
			s.setDate(4, dob);&#13;
			boolean flag = s.execute();&#13;
			if(!flag) {&#13;
				System.out.println("Procedure Called.");&#13;
			}else {&#13;
				System.out.println("Failed to call Procedure.");&#13;
			}&#13;
			con.close();&#13;
			sc.close();&#13;
	} catch (ClassNotFoundException | SQLException e) {&#13;
				e.printStackTrace();&#13;
	} catch (ParseException e) {&#13;
				e.printStackTrace();&#13;
	}</template><template autoinsert="true" context="java" deleted="false" description="CreateTable" enabled="true" name="jdbcCreate">try{&#13;
	Class.forName("com.mysql.cj.jdbc.Driver");&#13;
	Connection con =  DriverManager.getConnection("jdbc:mysql://localhost:3306/AdvanceJavaAssignment","root","password");&#13;
	Statement s = con.createStatement();&#13;
	boolean flag = s.execute("create table student ( rno int primary key auto_increment, name varchar(20), marks float, dob date);");&#13;
	&#13;
	} catch (ClassNotFoundException | SQLException e) {&#13;
				e.printStackTrace();&#13;
	}</template><template autoinsert="true" context="java" deleted="false" description="DeleteQuery" enabled="true" name="jdbcDeleteQuery">try {&#13;
			Class.forName("com.mysql.cj.jdbc.Driver");&#13;
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/AdvanceJavaAssignment", "root","password");&#13;
			PreparedStatement st = Con.prepareStatement("delete from student where rno = ?");&#13;
			&#13;
			st.setInt(1, rno);&#13;
				&#13;
			int flag = st.executeUpdate();&#13;
			System.out.println("Record Removed : "+ flag);&#13;
			Con.close();&#13;
	}&#13;
	catch (SQLException | ClassNotFoundException e) {	&#13;
				e.printStackTrace();&#13;
	} </template><template autoinsert="true" context="java" deleted="false" description="InsertStatement" enabled="true" name="jdbcInsert">try{&#13;
	Class.forName("com.mysql.cj.jdbc.Driver");&#13;
	Connection con =  DriverManager.getConnection("jdbc:mysql://localhost:3306/AdvanceJavaAssignment","root","password");&#13;
	PreparedStatement s = con.prepareStatement("insert into student values(?,?,?,?);");&#13;
&#13;
} catch (ClassNotFoundException | SQLException e) {&#13;
				e.printStackTrace();&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="SelectQuery" enabled="true" name="jdbcSelectQuery">try{&#13;
	Class.forName("com.mysql.cj.jdbc.Driver");&#13;
	Connection con =  DriverManager.getConnection("jdbc:mysql://localhost:3306/AdvanceJavaAssignment","root","password");&#13;
	PreparedStatement st = con.prepareStatement("select * from student");&#13;
	ResultSet rs = st.executeQuery();&#13;
				&#13;
	while(rs.next()) {&#13;
			System.out.println("Roll No : "+rs.getInt(1)+"\nName : "+rs.getString(2)+"\nMarks : "+rs.getFloat(3)+"\nDate of Birth : "+rs.getDate(4)+"\n");&#13;
	}&#13;
	con.close();&#13;
} catch (ClassNotFoundException | SQLException e) {&#13;
				e.printStackTrace();&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="UpdateQuery" enabled="true" name="jdbcUpdate">try {&#13;
			Class.forName("com.mysql.cj.jdbc.Driver");&#13;
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/AdvanceJavaAssignment", "root","password");&#13;
			PreparedStatement st = Con.prepareStatement("update student set name = ?, marks = ? , dob = ? where rno = ?");&#13;
			st.setString(1,student.getName());&#13;
			st.setFloat(2,student.getMarks());&#13;
			java.sql.Date dob = new java.sql.Date(student.getTime());&#13;
			st.setDate(3, dob);&#13;
			st.setInt(4, student.getRno());&#13;
				&#13;
			int flag = st.executeUpdate();&#13;
			System.out.println("Record Updated : "+ flag);&#13;
			Con.close();&#13;
	}&#13;
	catch (SQLException | ClassNotFoundException e) {	&#13;
				e.printStackTrace();&#13;
	} </template><template autoinsert="true" context="java" deleted="false" description="scIniti" enabled="true" name="sc">sc = new Scanner(System.in);</template><template autoinsert="true" context="java" deleted="false" description="DateFormatInSql" enabled="true" name="sqlDateFormat">String d = sc.next();&#13;
SimpleDateFormat StdFormat = new SimpleDateFormat("yyyy-mm-dd");&#13;
Date dt1 =  StdFormat.parse(d);&#13;
long time = dt1.getTime();//millisecond&#13;
java.sql.Date dob = new java.sql.Date(time);</template><template autoinsert="false" context="java" deleted="false" description="switch case expression" enabled="true" id="org.eclipse.jdt.ui.templates.switch.case.expression" name="switch">switch (${key}) {
	case ${value}:
		${cursor}
		break ${type};

	default:
		throw new IllegalArgumentException("Unexpected value: " + ${key});
}</template></templates>